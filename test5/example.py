# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_example')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_example')
    _example = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_example', [dirname(__file__)])
        except ImportError:
            import _example
            return _example
        try:
            _mod = imp.load_module('_example', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _example = swig_import_helper()
    del swig_import_helper
else:
    import _example
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class arrayint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arrayint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arrayint, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _example.new_arrayint(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_arrayint
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _example.arrayint___getitem__(self, index)

    def __setitem__(self, index, value):
        return _example.arrayint___setitem__(self, index, value)

    def cast(self):
        return _example.arrayint_cast(self)
    if _newclass:
        frompointer = staticmethod(_example.arrayint_frompointer)
    else:
        frompointer = _example.arrayint_frompointer
arrayint_swigregister = _example.arrayint_swigregister
arrayint_swigregister(arrayint)

def arrayint_frompointer(t):
    return _example.arrayint_frompointer(t)
arrayint_frompointer = _example.arrayint_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _example.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _example.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _example.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _example.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_example.doubleArray_frompointer)
    else:
        frompointer = _example.doubleArray_frompointer
doubleArray_swigregister = _example.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _example.doubleArray_frompointer(t)
doubleArray_frompointer = _example.doubleArray_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _example.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _example.intp_assign(self, value)

    def value(self):
        return _example.intp_value(self)

    def cast(self):
        return _example.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_example.intp_frompointer)
    else:
        frompointer = _example.intp_frompointer
intp_swigregister = _example.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _example.intp_frompointer(t)
intp_frompointer = _example.intp_frompointer

class Example(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Example, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Example, name)
    __repr__ = _swig_repr

    def add(self, arg2, arg3, arg4):
        return _example.Example_add(self, arg2, arg3, arg4)

    def sub(self, arg2, arg3):
        return _example.Example_sub(self, arg2, arg3)

    def say_hello(self):
        return _example.Example_say_hello(self)

    def negate(self, INOUT):
        return _example.Example_negate(self, INOUT)

    def sumitems(self, INPUT, arg3):
        return _example.Example_sumitems(self, INPUT, arg3)

    def print_array(self, arg2):
        return _example.Example_print_array(self, arg2)

    def __init__(self):
        this = _example.new_Example()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _example.delete_Example
    __del__ = lambda self: None
Example_swigregister = _example.Example_swigregister
Example_swigregister(Example)

# This file is compatible with both classic and new-style classes.


